{"ast":null,"code":"var _ = require('../helper');\n\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_', '`', '{', '\\\\|', '}', '~'].join('|');\nvar specialCharactersRegexp = new RegExp(specialCharacters);\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () {\n        return {\n          message: 'upper case letters (A-Z)',\n          code: 'upperCase'\n        };\n      },\n      test: function (password) {\n        return /[A-Z]/.test(password);\n      }\n    },\n    lowerCase: {\n      explain: function () {\n        return {\n          message: 'lower case letters (a-z)',\n          code: 'lowerCase'\n        };\n      },\n      test: function (password) {\n        return /[a-z]/.test(password);\n      }\n    },\n    specialCharacters: {\n      explain: function () {\n        return {\n          message: 'special characters (e.g. !@#$%^&*)',\n          code: 'specialCharacters'\n        };\n      },\n      test: function (password) {\n        return specialCharactersRegexp.test(password);\n      }\n    },\n    numbers: {\n      explain: function () {\n        return {\n          message: 'numbers (i.e. 0-9)',\n          code: 'numbers'\n        };\n      },\n      test: function (password) {\n        return /\\d/.test(password);\n      }\n    }\n  }\n};","map":{"version":3,"names":["_","require","specialCharacters","join","specialCharactersRegexp","RegExp","module","exports","validate","options","isObject","Error","isArray","expressions","isEmpty","ok","every","expression","isFunction","explain","test","message","code","items","map","missing","password","explained","verified","assert","result","charsets","upperCase","lowerCase","numbers"],"sources":["/Users/sunguannan/VisualStudioProjects/authdemo/node_modules/password-sheriff/lib/rules/contains.js"],"sourcesContent":["var _ = require('../helper');\n\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_','`','{','\\\\|', '}','~'].join('|');\n\nvar specialCharactersRegexp = new RegExp(specialCharacters);\n\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () { return {\n        message: 'upper case letters (A-Z)',\n        code: 'upperCase'\n      }; },\n      test: function (password) { return /[A-Z]/.test(password); }\n    },\n    lowerCase: {\n      explain: function () { return {\n        message: 'lower case letters (a-z)',\n        code: 'lowerCase'\n      }; },\n      test: function (password) { return /[a-z]/.test(password); }\n    },\n    specialCharacters: {\n      explain: function () { return {\n        message: 'special characters (e.g. !@#$%^&*)',\n        code: 'specialCharacters'\n      }; },\n      test: function (password) { return specialCharactersRegexp.test(password); }\n    },\n    numbers: {\n      explain: function () { return {\n        message: 'numbers (i.e. 0-9)',\n        code: 'numbers'\n      }; },\n      test: function (password) { return /\\d/.test(password); }\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}