{"ast":null,"code":"'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\nvar CSSCore = {\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function addClass(element, className) {\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function removeClass(element, className) {\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ') // multiple spaces to one\n        .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to check the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function hasClass(element, className) {\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n};\nmodule.exports = CSSCore;","map":{"version":3,"names":["CSSCore","addClass","element","className","classList","add","hasClass","removeClass","remove","replace","RegExp","contains","indexOf","module","exports"],"sources":["/Users/sunguannan/VisualStudioProjects/authdemo/node_modules/auth0-lock/lib/CSSCore.js"],"sourcesContent":["'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\nvar CSSCore = {\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function addClass(element, className) {\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function removeClass(element, className) {\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className.replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1').replace(/\\s+/g, ' ') // multiple spaces to one\n        .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to check the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function hasClass(element, className) {\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n};\nmodule.exports = CSSCore;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,SAASA,QAAQA,CAACC,OAAO,EAAEC,SAAS,EAAE;IAC9C,IAAIA,SAAS,EAAE;MACb,IAAID,OAAO,CAACE,SAAS,EAAE;QACrBF,OAAO,CAACE,SAAS,CAACC,GAAG,CAACF,SAAS,CAAC;MAClC,CAAC,MAAM,IAAI,CAACH,OAAO,CAACM,QAAQ,CAACJ,OAAO,EAAEC,SAAS,CAAC,EAAE;QAChDD,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,GAAG,GAAG,GAAGA,SAAS;MACzD;IACF;IACA,OAAOD,OAAO;EAChB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,WAAW,EAAE,SAASA,WAAWA,CAACL,OAAO,EAAEC,SAAS,EAAE;IACpD,IAAIA,SAAS,EAAE;MACb,IAAID,OAAO,CAACE,SAAS,EAAE;QACrBF,OAAO,CAACE,SAAS,CAACI,MAAM,CAACL,SAAS,CAAC;MACrC,CAAC,MAAM,IAAIH,OAAO,CAACM,QAAQ,CAACJ,OAAO,EAAEC,SAAS,CAAC,EAAE;QAC/CD,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,SAAS,GAAGP,SAAS,GAAG,WAAW,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CAACM,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAAA,CAC9HA,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;MAC9B;IACF;IACA,OAAOP,OAAO;EAChB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,QAAQ,EAAE,SAASA,QAAQA,CAACJ,OAAO,EAAEC,SAAS,EAAE;IAC9C,IAAID,OAAO,CAACE,SAAS,EAAE;MACrB,OAAO,CAAC,CAACD,SAAS,IAAID,OAAO,CAACE,SAAS,CAACO,QAAQ,CAACR,SAAS,CAAC;IAC7D;IACA,OAAO,CAAC,GAAG,GAAGD,OAAO,CAACC,SAAS,GAAG,GAAG,EAAES,OAAO,CAAC,GAAG,GAAGT,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5E;AACF,CAAC;AACDU,MAAM,CAACC,OAAO,GAAGd,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}