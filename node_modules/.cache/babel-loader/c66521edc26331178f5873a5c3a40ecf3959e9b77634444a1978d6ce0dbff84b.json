{"ast":null,"code":"var charsets = require('./lib/rules/contains').charsets;\nvar upperCase = charsets.upperCase;\nvar lowerCase = charsets.lowerCase;\nvar numbers = charsets.numbers;\nvar specialCharacters = charsets.specialCharacters;\nvar PasswordPolicy = require('./lib/policy');\nvar none = new PasswordPolicy({\n  length: {\n    minLength: 1\n  }\n});\nvar low = new PasswordPolicy({\n  length: {\n    minLength: 6\n  }\n});\nvar fair = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  contains: {\n    expressions: [lowerCase, upperCase, numbers]\n  }\n});\nvar good = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  }\n});\nvar excellent = new PasswordPolicy({\n  length: {\n    minLength: 10\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  },\n  identicalChars: {\n    max: 2\n  }\n});\nvar policiesByName = {\n  none: none,\n  low: low,\n  fair: fair,\n  good: good,\n  excellent: excellent\n};\n\n/**\n * Creates a password policy.\n *\n * @param {String} policyName Name of policy to use.\n */\nmodule.exports = function (policyName) {\n  var policy = policiesByName[policyName] || policiesByName.none;\n  return {\n    /**\n     * Checks that a password meets this policy\n     *\n     * @method check\n     * @param {String} password\n     */\n    check: function (password) {\n      return policy.check(password);\n    },\n    /**\n     * @method assert\n     * Asserts that a passord meets this policy else throws an exception.\n     *\n     * @param {String} password\n     */\n    assert: function (password) {\n      return policy.assert(password);\n    },\n    missing: function (password) {\n      return policy.missing(password);\n    },\n    missingAsMarkdown: function (password) {\n      return policy.missingAsMarkdown(password);\n    },\n    explain: function () {\n      return policy.explain();\n    },\n    /**\n     * Friendly string representation of the policy\n     * @method toString\n     */\n    toString: function () {\n      return policy.toString();\n    }\n  };\n};\nmodule.exports.PasswordPolicy = PasswordPolicy;\nmodule.exports.charsets = charsets;\n\n// module.exports.rulesToApply = rulesToApply;","map":{"version":3,"names":["charsets","require","upperCase","lowerCase","numbers","specialCharacters","PasswordPolicy","none","length","minLength","low","fair","contains","expressions","good","containsAtLeast","atLeast","excellent","identicalChars","max","policiesByName","module","exports","policyName","policy","check","password","assert","missing","missingAsMarkdown","explain","toString"],"sources":["/Users/sunguannan/VisualStudioProjects/authdemo/node_modules/password-sheriff/index.js"],"sourcesContent":["\nvar charsets = require('./lib/rules/contains').charsets;\n\nvar upperCase         = charsets.upperCase;\nvar lowerCase         = charsets.lowerCase;\nvar numbers           = charsets.numbers;\nvar specialCharacters = charsets.specialCharacters;\n\nvar PasswordPolicy = require('./lib/policy');\n\nvar none =  new PasswordPolicy({\n  length: { minLength: 1 }\n});\n\nvar low = new PasswordPolicy({\n  length: { minLength: 6 }\n});\n\nvar fair = new PasswordPolicy({\n  length: { minLength: 8 },\n  contains: {\n    expressions: [lowerCase, upperCase, numbers]\n  }\n});\n\nvar good = new PasswordPolicy({\n  length: { minLength: 8 },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  }\n});\n\nvar excellent = new PasswordPolicy({\n  length: { minLength: 10 },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  },\n  identicalChars: { max: 2 }\n});\n\nvar policiesByName = {\n  none:       none,\n  low:        low,\n  fair:       fair,\n  good:       good,\n  excellent:  excellent\n};\n\n/**\n * Creates a password policy.\n *\n * @param {String} policyName Name of policy to use.\n */\nmodule.exports = function (policyName) {\n  var policy = policiesByName[policyName] || policiesByName.none;\n\n  return {\n    /**\n     * Checks that a password meets this policy\n     *\n     * @method check\n     * @param {String} password\n     */\n    check: function (password) {\n      return policy.check(password);\n    },\n    /**\n     * @method assert\n     * Asserts that a passord meets this policy else throws an exception.\n     *\n     * @param {String} password\n     */\n    assert: function (password) {\n      return policy.assert(password);\n    },\n\n    missing: function (password) {\n      return policy.missing(password);\n    },\n\n    missingAsMarkdown: function (password) {\n      return policy.missingAsMarkdown(password);\n    },\n\n    explain: function () {\n      return policy.explain();\n    },\n\n    /**\n     * Friendly string representation of the policy\n     * @method toString\n     */\n    toString: function () {\n      return policy.toString();\n    }\n  };\n};\n\nmodule.exports.PasswordPolicy = PasswordPolicy;\n\nmodule.exports.charsets = charsets;\n\n// module.exports.rulesToApply = rulesToApply;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}