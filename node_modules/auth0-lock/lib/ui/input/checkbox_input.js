"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _input_wrap = _interopRequireDefault(require("./input_wrap"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var CheckboxInput = exports.default = /*#__PURE__*/function (_React$Component) {
  function CheckboxInput() {
    _classCallCheck(this, CheckboxInput);
    return _callSuper(this, CheckboxInput, arguments);
  }
  _inherits(CheckboxInput, _React$Component);
  return _createClass(CheckboxInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        lockId = _this$props.lockId,
        name = _this$props.name,
        ariaLabel = _this$props.ariaLabel,
        placeholder = _this$props.placeholder,
        checked = _this$props.checked,
        placeholderHTML = _this$props.placeholderHTML,
        isValid = _this$props.isValid,
        invalidHint = _this$props.invalidHint;
      var spanClass = invalidHint ? '' : 'no-hint';
      return /*#__PURE__*/_react.default.createElement(_input_wrap.default, {
        invalidHint: invalidHint,
        isValid: isValid,
        name: name,
        className: "auth0-lock-input-checkbox"
      }, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
        id: "".concat(lockId, "-").concat(name),
        type: "checkbox",
        checked: checked === 'true',
        onChange: this.handleOnChange.bind(this),
        name: name,
        "aria-label": ariaLabel || name,
        "aria-invalid": !isValid
      }), placeholderHTML ?
      /*#__PURE__*/
      // placeholderHTML allows raw HTML
      // eslint-disable-next-line react/no-danger
      _react.default.createElement("span", {
        className: spanClass,
        dangerouslySetInnerHTML: {
          __html: placeholderHTML
        }
      }) : /*#__PURE__*/_react.default.createElement("span", {
        className: spanClass
      }, placeholder)));
    }
  }, {
    key: "handleOnChange",
    value: function handleOnChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e);
      }
    }
  }]);
}(_react.default.Component);
