{"ast":null,"code":"var _ = require('../helper');\nvar contains = require('./contains');\nfunction createIntroMessage() {\n  return 'At least %d of the following %d types of characters:';\n}\nmodule.exports = {\n  // TODO validate atLeast to be a number > 0 and expressions to be a list of at least 1\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n    if (!_.isNumber(options.atLeast) || _.isNaN(options.atLeast) || options.atLeast < 1) {\n      throw new Error('atLeast should be a valid, non-NaN number, greater than 0');\n    }\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('expressions should be an non-empty array');\n    }\n    if (options.expressions.length < options.atLeast) {\n      throw new Error('expressions length should be greater than atLeast');\n    }\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n    if (!ok) {\n      throw new Error('containsAtLeast expressions are invalid: An explain and a test function should be provided');\n    }\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: options.expressions.map(function (x) {\n        return x.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions && options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verifiedCount = expressions.reduce(function (val, ex) {\n      return val + !!ex.verified;\n    }, 0);\n    var verified = verifiedCount >= options.atLeast;\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: expressions,\n      verified: verified\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n    var workingExpressions = options.expressions.filter(function (expression) {\n      return expression.test(password);\n    });\n    return workingExpressions.length >= options.atLeast;\n  },\n  charsets: contains.charsets\n};","map":{"version":3,"names":["_","require","contains","createIntroMessage","module","exports","validate","options","isObject","Error","isNumber","atLeast","isNaN","isArray","expressions","isEmpty","length","ok","every","expression","isFunction","explain","test","message","code","format","items","map","x","missing","password","explained","verified","verifiedCount","reduce","val","ex","assert","workingExpressions","filter","charsets"],"sources":["/Users/sunguannan/VisualStudioProjects/authdemo/node_modules/password-sheriff/lib/rules/containsAtLeast.js"],"sourcesContent":["var _ = require('../helper');\n\nvar contains = require('./contains');\n\nfunction createIntroMessage() {\n  return 'At least %d of the following %d types of characters:';\n}\n\nmodule.exports = {\n  // TODO validate atLeast to be a number > 0 and expressions to be a list of at least 1\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isNumber(options.atLeast) || _.isNaN(options.atLeast) || options.atLeast < 1) {\n      throw new Error('atLeast should be a valid, non-NaN number, greater than 0');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('expressions should be an non-empty array');\n    }\n\n    if (options.expressions.length < options.atLeast) {\n      throw new Error('expressions length should be greater than atLeast');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('containsAtLeast expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: options.expressions.map(function (x) { return x.explain(); })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions && options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n\n    var verifiedCount = expressions.reduce(function (val, ex) { return val + !!ex.verified; }, 0);\n    var verified = verifiedCount >= options.atLeast;\n\n    return {\n      message: createIntroMessage(),\n      code: 'containsAtLeast',\n      format: [options.atLeast, options.expressions.length],\n      items: expressions,\n      verified: verified\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    var workingExpressions = options.expressions.filter(function (expression) {\n      return expression.test(password);\n    });\n\n    return workingExpressions.length >= options.atLeast;\n  },\n  charsets: contains.charsets\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}